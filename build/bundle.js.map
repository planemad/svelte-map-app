{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/mapbox.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/mapbox.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/asset-loader.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/event-bindings.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/map/map-action.js","../../node_modules/svelte/store/index.mjs","../../node_modules/@beyonk/svelte-mapbox/src/lib/queue.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/map/Map.svelte","../../node_modules/@beyonk/svelte-mapbox/src/lib/geocoder/geocoder-action.js","../../node_modules/@beyonk/svelte-mapbox/src/lib/geocoder/Geocoder.svelte","../../src/App.svelte","../../src/lib/userLocale.js","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","const contextKey = {}\n\nexport { contextKey }\n","const contextKey = {}\n\nexport { contextKey }\n","function load (assets, cb) {\n  for (const { type, value, id } of assets) {\n    const existing = document.getElementById(id)\n\n    if (existing) {\n      if (type === 'script') {\n        cb()\n      }\n      return\n    }\n\n    const tag = document.createElement(type)\n    tag.id = id\n    if (type === 'script') {\n      tag.async = true\n      tag.defer = true\n      tag.src = value\n      tag.onload = () => cb()\n    } else {\n      tag.rel = 'stylesheet'\n      tag.href = value\n    }\n    document.body.appendChild(tag)\n  }\n}\n\nexport {\n  load\n}\n","function bindEvents (el, handlers, mapbox, node) {\n  const unbindings = []\n\n  for (const [ handler, fn ] of Object.entries(handlers)) {\n    const cmd = ev => {\n      const [ eventName, detail ] = fn(el, ev, mapbox)\n      node.dispatchEvent(\n        new CustomEvent(eventName, { detail })\n      )\n    }\n    el.on(handler, cmd)\n    unbindings.push([ handler, cmd ])\n  }\n\n  return () => {\n    for (const [ handler, cmd ] of unbindings) {\n      el.off(handler, cmd)\n    }\n  }\n}\n\nexport {\n  bindEvents\n}\n","import { load } from '../asset-loader.js'\nimport { bindEvents } from '../event-bindings.js'\n\nexport default function action (node, options = {}) {\n  let map\n\n  const resources = [\n    { type: 'script', attr: 'src', value: `//api.mapbox.com/mapbox-gl-js/${options.version}/mapbox-gl.js`, id: 'byk-gl-js' },\n    { type: 'link', attr: 'href', value: `//api.mapbox.com/mapbox-gl-js/${options.version}/mapbox-gl.css`, id: 'byk-gl-css' }\n  ]\n\n  const customStylesheetUrl = options.customStylesheetUrl\n  if (customStylesheetUrl) {\n    resources.push({ type: 'link', attr: 'href', value: customStylesheetUrl, id: 'byk-mcsu-css' })\n  }\n\n  let unbind = () => {}\n  load(resources, () => {\n    unbind = init({ ...options, container: node }, node)\n  })\n\n  return {\n    destroy () {\n      unbind()\n      map && map.remove && map.remove()\n    }\n  }\n}\n\nfunction init (options, node) {\n  window.mapboxgl.accessToken = options.accessToken\n  const el = new window.mapboxgl.Map(options)\n\n  return bindEvents(el, handlers, window.mapboxgl, node)\n}\n\nconst handlers = {\n  dragend: el => {\n    return [ 'dragend', { center: el.getCenter() } ]\n  },\n  drag: el => {\n    return [ 'drag', { center: el.getCenter() } ]\n  },\n  moveend: el => {\n    return [ 'recentre', { center: el.getCenter() } ]\n  },\n  click: (el, { lngLat }) => {\n    return [ 'click', { lng: lngLat.lng, lat: lngLat.lat } ]\n  },\n  zoomstart: el => {\n    return [ 'zoomstart', { zoom: el.getZoom() } ]\n  },\n  zoom: el => {\n    return [ 'zoom', { zoom: el.getZoom() } ]\n  },\n  zoomend: el => {\n    return [ 'zoomend', { zoom: el.getZoom() } ]\n  },\n  load: (el, ev, mapbox) => {\n    return [ 'ready', { map: el, mapbox } ]\n  }\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store'\n\nexport class EventQueue {\n  constructor () {\n    this.queue = writable([])\n    this.unsubscribe = null\n    this.started = false\n  }\n\n  send (command, params = []) {\n    if (!command) { return }\n    this.queue.update(q => ([ ...q, [ command, params ] ]))\n  }\n\n  start (map) {\n    this.unsubscribe = this.queue.subscribe(queue => {\n      while (queue.length) {\n        const [ command, params ] = queue.shift()\n        map[command].apply(map, params)\n      }\n    })\n    this.started = true\n  }\n\n  stop () {\n    if (!this.started) { return }\n    this.unsubscribe()\n    this.queue = writable([])\n    this.started = false\n  }\n}\n","<div\n  use:action={optionsWithDefaults}\n  on:ready={init}\n  on:recentre\n  on:dragend\n  on:click\n  on:zoomstart\n  on:zoom\n  on:zoomend\n  on:drag\n  >\n  {#if map}\n  <slot></slot>\n  {/if}\n</div>\n\n<style>\n  div {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<script>\n  import { setContext, onDestroy, createEventDispatcher } from 'svelte'\n  import { contextKey } from '../mapbox.js'\n  import action from './map-action.js'\n  import { EventQueue } from '../queue.js'\n\n  export let map = null\n  export let version = 'v2.3.1'\n  export let center = [ 0, 0 ]\n  export let zoom = 9\n  export let zoomRate = 1\n  export let wheelZoomRate = 1\n  export let options = {}\n  export let accessToken\n  export let customStylesheetUrl = false\n  export let style = 'mapbox://styles/mapbox/streets-v11'\n\n  const dispatch = createEventDispatcher()\n\n  setContext(contextKey, {\n    getMap: () => map,\n    getMapbox: () => mapbox\n  })\n\n  let container\n  let mapbox\n\n  const optionsWithDefaults = Object.assign({\n    accessToken,\n    container,\n    style,\n    center,\n    zoom,\n    zoomRate,\n    wheelZoomRate,\n    version,\n    customStylesheetUrl,\n    map\n  }, options)\n\n  const queue = new EventQueue()\n\n  function init ({ detail }) {\n    map = detail.map\n    mapbox = detail.mapbox\n    queue.start(map)\n    dispatch('ready')\n  }\n\n  onDestroy(() => {\n    queue.stop()\n    map = undefined\n  })\n\n  export function fitBounds (bbox, data = {}) {\n    queue.send('fitBounds', [ bbox, data ])\n  }\n\n  export function flyTo (destination, data = {}) {\n    queue.send('flyTo', [ destination, data ])\n  }\n\n  export function resize () {\n    queue.send('resize')\n  }\n\n  export function setCenter (coords, data = {}) {\n    queue.send('setCenter', [ coords, data ])\n  }\n\n  export function setZoom (value, data = {}) {\n    queue.send('setZoom', [ value, data ])\n  }\n\n  export function addControl (control, position = 'top-right') {\n    queue.send('addControl', [ control, position ])\n  }\n\n  export function getMap () {\n    return map\n  }\n\n  export function getMapbox () {\n    return mapbox\n  }\n\n  $: zoom && setZoom(zoom)\n</script>\n","import { load } from '../asset-loader.js'\nimport { bindEvents } from '../event-bindings.js'\n\nexport default function action (node, options = {}) {\n  let map\n\n  const resources = [\n    { type: 'script', value: `//api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/${options.version}/mapbox-gl-geocoder.min.js`, id: 'byk-gc-js' },\n    { type: 'link', value: `//api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/${options.version}/mapbox-gl-geocoder.css`, id: 'byk-gc-css' }\n  ]\n\n  const customStylesheetUrl = options.customStylesheetUrl\n  if (customStylesheetUrl) {\n    resources.push({ type: 'link', value: customStylesheetUrl, id: 'byk-gcsu-css' })\n  }\n\n  let unbind = () => {}\n  load(resources, () => {\n    unbind = init(options, node)\n  })\n\n  return {\n    destroy () {\n      unbind()\n      map && map.remove && map.remove()\n    }\n  }\n}\n\nfunction init (options, node) {\n  const geocoder = new window.MapboxGeocoder(options)\n  geocoder.addTo(`#${node.id}`)\n  if (options.value) {\n    geocoder.setInput(options.value)\n  }\n\n  return bindEvents(geocoder, handlers, false, node)\n}\n\nconst handlers = {\n  results: (el, ev) => {\n    return [ 'results', ev ]\n  },\n  result: (el, ev) => {\n    return [ 'result', ev ]\n  },\n  loading: (el, ev) => {\n    return [ 'loading', ev ]\n  },\n  error: (el, ev) => {\n    return [ 'error', ev ]\n  },\n  clear: (el, ev) => {\n    return [ 'clear', ev ]\n  },\n  load: el => {\n    return [ 'ready', { geocoder: el } ]\n  }\n}\n","<div\n  id={fieldId}\n  use:action={optionsWithDefaults}\n  on:ready={init}\n  on:results\n  on:result\n  on:loading\n  on:error\n  on:clear\n  on:load\n/>\n\n<script>\n  import { createEventDispatcher } from 'svelte'\n  import action from './geocoder-action.js'\n\n  export let accessToken\n  export let options = {}\n  export let version = 'v4.5.1'\n  export let types = [ 'country', 'region', 'postcode', 'district', 'place', 'locality', 'neighborhood', 'address' ]\n  export let placeholder = 'Search'\n  export let value = null\n  export let customStylesheetUrl = false\n  export let geocoder\n\n  const dispatch = createEventDispatcher()\n  const fieldId = 'bsm-' + Math.random().toString(36).substring(6)\n\n  const optionsWithDefaults = Object.assign({\n    version,\n    accessToken,\n    types: types.join(','),\n    placeholder,\n    customStylesheetUrl,\n    value\n  }, options)\n\n  function init ({ detail }) {\n    geocoder = detail.geocoder\n    dispatch('ready')\n  }\n</script>\n\n<style>\n  div {\n    padding: 0;\n  }\n</style>","<script>\n\n\timport { onMount, setContext } from \"svelte\";\n\timport { contextKey } from \"./mapbox.js\";\n\n\timport { freeGeoIP } from \"./lib/userLocale.js\";\n\timport { Map, Geocoder, controls } from \"@beyonk/svelte-mapbox\";\n\n\texport let mapbox, map, geocoder;\n\nexport let appConfig = {\n\tmap: {\n\t\taccessToken: \"pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiY2l3ZmNjNXVzMDAzZzJ0cDV6b2lkOG9odSJ9.eep6sUoBS0eMN4thZUWpyQ\",\n\t\tconfigUrl: \"https://gist.githubusercontent.com/planemad/62be758755320cc052eecb8c8bde01bf/raw/9b6bcf880b83397167931975eed42fdb4762b85b/sample-map-config.js\"\n\t}\n\n}\n\tsetContext(contextKey, {\n\t\tgetMap: () => map,\n\t\tgetMapbox: () => mapbox,\n\t});\n\n\t//\n\t// Initialize Mapbox compnent\n\t//\n\n\tonMount(() => {\n\n\tfreeGeoIP((resp) => {\n\t\t\tconsole.log(resp)\n\t\t\tmap.setCenter([resp.longitude, resp.latitude]);\n\t\t});\n\n    // DEBUG: appConfig\n    // console.log($settings,appConfig);\n\n    // Load map config from external JSON\n    if (appConfig.map.configUrl) {\n      fetch(appConfig.map.configUrl)\n        .then((resp) => resp.json())\n        .then((data) => {\n          Object.assign(appConfig.map, data);\n        });\n    }\n\n    if (!window.location.hash) appConfig.map.autoLocate = true;\n\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href =\n      \"https://raw.githack.com/korywka/mapbox-gl-controls/master/docs/controls.css\";\n    document.body.appendChild(link);\n\n\n    return () => {\n      map.remove();\n      link.parentNode.removeChild(link);\n    };\n  });\n\n\t//\n  // Map state change handlers\n  //\n\n  function onGeocoderResult(e) {\n    map.fitBounds(e.detail.result.bbox);\n    setLocationContext({\n      lng: e.detail.result.center[0],\n      lat: e.detail.result.center[1],\n    });\n  }\n\n  function onGeolocate(e) {\n    setLocationContext();\n  }\n\n  function onMapReady(e) {\n    map = mapbox.getMap();\n    mapbox = mapbox.getMapbox();\n\n    // Enable RTL support\n    // https://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-rtl-text/\n    mapbox.setRTLTextPlugin(\n      \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js\",\n      null,\n      true // Lazy load the plugin\n    );\n  }\n\n</script>\n\n<main>\n\t<div id=\"map-overlay\">\n\t\t<div class=\"uk-width-large uk-grid-small\" uk-grid>\n\t\t\t<div>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"uk-card uk-card-default uk-card-body uk-padding-small\"\n\t\t\t\t>\n\t\t\t\t\t<h3 class=\"uk-card-title\">World Water Map</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tas\n\t\t\t\t\t</p>\n\t\t\t\t\t<div class=\"uk-position-relative\">\n\t\t\t\t\t\t{#if null}\n\t\t\t\t\t\t  <div\n\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t{#await null}\n\t\t\t\t\t\t\t  <span>...</span>\n\t\t\t\t\t\t\t{:then result}\n\t\t\t\t\t\t\t  {#each result.features as feature}\n\t\t\t\t\t\t\t\t{#if feature.place_type.indexOf(\"country\") > -1 || (feature.place_type.indexOf(\"region\") > -1 && map.getZoom() > 6) || (feature.place_type.indexOf(\"district\") > -1 && map.getZoom() > 9)}\n\t\t\t\t\t\t\t\t  <a\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\tstyle=\"color:grey;text-decoration: underline\"\n\t\t\t\t\t\t\t\t\thref=\"https://www.wikidata.org/wiki/{feature.properties\n\t\t\t\t\t\t\t\t\t  .wikidata}\"\n\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t{feature.text}</a\n\t\t\t\t\t\t\t\t  >{feature.place_type.indexOf(\"country\") == -1 ? \", \" : \"\"}\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t  {/each}\n\t\t\t\t\t\t\t{/await}\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t  \n\t\t\t\t\t\t<Geocoder\n\t\t\t\t\t\t  bind:geocoder\n\t\t\t\t\t\t  accessToken={appConfig.map.accessToken}\n\t\t\t\t\t\t  types={[\n\t\t\t\t\t\t\t\"country\",\n\t\t\t\t\t\t\t\"region\",\n\t\t\t\t\t\t\t\"postcode\",\n\t\t\t\t\t\t\t\"district\",\n\t\t\t\t\t\t\t\"place\",\n\t\t\t\t\t\t\t\"locality\",\n\t\t\t\t\t\t\t\"neighborhood\",\n\t\t\t\t\t\t  ]}\n\t\t\t\t\t\t  options={{\n\t\t\t\t\t\t\tclearOnBlur: true,\n\t\t\t\t\t\t\tcollapsed: true,\n\t\t\t\t\t\t\tmarker: true,\n\t\t\t\t\t\t\tmapboxgl: mapbox,\n\t\t\t\t\t\t  }}\n\t\t\t\t\t\t  on:result={onGeocoderResult}\n\t\t\t\t\t\t/>\n\t\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"uk-card uk-card-default uk-card-body\">Item</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div id=\"map\">\n\t\t<Map\n\t\t\taccessToken={appConfig.map.accessToken}\n\t\t\tbind:this={map}\n\t\t\ton:recentre={(e) =>\n\t\t\t\tconsole.log(e.detail.center.lat, e.detail.center.lng)}\n\t\t\toptions={{ projection: \"naturalEarth\" }}\n\t\t\tstyle=\"mapbox://styles/planemad/ckd42fwa20n531iqrewerwla1\"\n\t\t\tversion=\"v2.6.1\"\n\t\t/>\n\t</div>\n</main>\n\n<style>\n\t#map-overlay {\n\t\tposition: absolute;\n\t\tmargin: 10px;\n\t\tz-index: 1;\n\t}\n\n\t#map {\n\t\theight: 100vh;\n\t\twidth: 100%;\n\t\tz-index: -1;\n\t}\n</style>\n","//\n// Detect user country code and browser locale\n//\n\nexport function traceCountry(onSuccess, onError) {\n\tlet userCountryCode = null;\n\n\tvar traceRequest = new XMLHttpRequest();\n\n\ttraceRequest.open(\"GET\", \"https://www.cloudflare.com/cdn-cgi/trace\");\n\n\ttraceRequest.onreadystatechange = () => {\n\n\t\tif (traceRequest.readyState == XMLHttpRequest.DONE) {\n\t\t\tif (traceRequest.status == 200) {\n\t\t\t\tuserCountryCode = traceRequest.responseText\n\t\t\t\t\t.match(/loc=([^\\n+]*)/)[1]\n\t\t\t\t\t.toUpperCase();\n\n\t\t\t\t\tconsole.log(traceRequest.responseText)\n\t\t\t\tonSuccess(userCountryCode)\n\t\t\t} \n\t\t}\n\t}\n\t\ttraceRequest.send(null);\n}\n\n/*\n\nUser geoIP details from https://freegeoip.app/ \n\n{\n    \"ip\": \"66.44.33.154\",\n    \"country_code\": \"US\",\n    \"country_name\": \"United States\",\n    \"region_code\": \"DC\",\n    \"region_name\": \"District of Columbia\",\n    \"city\": \"Washington\",\n    \"zip_code\": \"20008\",\n    \"time_zone\": \"America/New_York\",\n    \"latitude\": 38.9392,\n    \"longitude\": -77.0585,\n    \"metro_code\": 511\n}\n*/\n\nexport function freeGeoIP(onSuccess){\n\tconst apiKey = \"8d1b1d00-4db5-11ec-85e0-8dc3d498b907\"\n\tconst freegeoipUrl = \"https://api.freegeoip.app/json/?apikey=\" + apiKey\n\n\tfetch(freegeoipUrl)\n\t\t.then( resp => resp.json())\n\t\t.then( data => onSuccess(data) )\n}","import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n  props: {\n    name: \"world\",\n  },\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","action_destroyer","action_result","destroy","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","call","setContext","key","context","set","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","contextKey","load","assets","cb","id","getElementById","tag","async","defer","onload","rel","href","body","bindEvents","el","handlers","mapbox","unbindings","entries","cmd","ev","eventName","dispatchEvent","CustomEvent","on","off","action","resources","version","customStylesheetUrl","unbind","window","mapboxgl","accessToken","container","dragend","center","getCenter","drag","moveend","click","lngLat","lng","lat","zoomstart","zoom","getZoom","zoomend","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","subscribe","invalidate","size","EventQueue","constructor","queue","unsubscribe","started","send","command","params","q","shift","apply","slot_ctx","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","undefined","merged","len","Math","max","r","zoomRate","wheelZoomRate","style","dispatch","getMap","getMapbox","optionsWithDefaults","setZoom","bbox","destination","coords","control","position","geocoder","MapboxGeocoder","addTo","setInput","results","result","loading","error","types","placeholder","fieldId","random","toString","substring","join","clearOnBlur","collapsed","marker","projection","appConfig","configUrl","onSuccess","resp","console","log","setCenter","longitude","latitude","fetch","json","location","hash","autoLocate","link","remove","fitBounds","setLocationContext"],"mappings":"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"}